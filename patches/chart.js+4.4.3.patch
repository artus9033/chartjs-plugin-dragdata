diff --git a/node_modules/chart.js/dist/core/core.scale.d.ts b/node_modules/chart.js/dist/core/core.scale.d.ts
index ca85bba..ea0fd1b 100644
--- a/node_modules/chart.js/dist/core/core.scale.d.ts
+++ b/node_modules/chart.js/dist/core/core.scale.d.ts
@@ -333,7 +333,7 @@ export default class Scale extends Element<import("../types/basic.js").AnyObject
      */
     protected _maxDigits(): number;
 }
-export type Chart = import('../types/index.js').Chart;
+export type Chart = import('../types/index.js').TChart;
 export type Tick = {
     value: number | string;
     label?: string;
diff --git a/node_modules/chart.js/dist/helpers/helpers.canvas.d.ts b/node_modules/chart.js/dist/helpers/helpers.canvas.d.ts
index ff83b28..a79cda0 100644
--- a/node_modules/chart.js/dist/helpers/helpers.canvas.d.ts
+++ b/node_modules/chart.js/dist/helpers/helpers.canvas.d.ts
@@ -1,4 +1,4 @@
-import type { Chart, Point, FontSpec, CanvasFontSpec, PointStyle, RenderTextOpts } from '../types/index.js';
+import type { TChart, Point, FontSpec, CanvasFontSpec, PointStyle, RenderTextOpts } from '../types/index.js';
 import type { TRBL, SplinePoint, RoundedRect, TRBLCorners } from '../types/geometric.js';
 /**
  * Converts the given font object into a CSS font string.
@@ -29,7 +29,7 @@ export declare function _longestText(ctx: CanvasRenderingContext2D, font: string
  * @returns The aligned pixel value.
  * @private
  */
-export declare function _alignPixel(chart: Chart, pixel: number, width: number): number;
+export declare function _alignPixel(chart: TChart, pixel: number, width: number): number;
 /**
  * Clears the entire canvas.
  */
diff --git a/node_modules/chart.js/dist/plugins/plugin.colors.d.ts b/node_modules/chart.js/dist/plugins/plugin.colors.d.ts
index d445b8a..63653a4 100644
--- a/node_modules/chart.js/dist/plugins/plugin.colors.d.ts
+++ b/node_modules/chart.js/dist/plugins/plugin.colors.d.ts
@@ -1,4 +1,4 @@
-import type { Chart } from '../types.js';
+import type { TChart } from '../types.js';
 export interface ColorsPluginOptions {
     enabled?: boolean;
     forceOverride?: boolean;
@@ -6,6 +6,6 @@ export interface ColorsPluginOptions {
 declare const _default: {
     id: string;
     defaults: ColorsPluginOptions;
-    beforeLayout(chart: Chart, _args: any, options: ColorsPluginOptions): void;
+    beforeLayout(chart: TChart, _args: any, options: ColorsPluginOptions): void;
 };
 export default _default;
diff --git a/node_modules/chart.js/dist/types.d.ts b/node_modules/chart.js/dist/types.d.ts
index f3d8392..c45f4b5 100644
--- a/node_modules/chart.js/dist/types.d.ts
+++ b/node_modules/chart.js/dist/types.d.ts
@@ -6,5 +6,5 @@ export * from './index.js';
 /**
  * Explicitly re-exporting to resolve the ambiguity.
  */
-export { BarController, BubbleController, DoughnutController, LineController, PieController, PolarAreaController, RadarController, ScatterController, Animation, Animations, Chart, DatasetController, Interaction, Scale, Ticks, defaults, layouts, registry, ArcElement, BarElement, LineElement, PointElement, BasePlatform, BasicPlatform, DomPlatform, Decimation, Filler, Legend, SubTitle, Title, Tooltip, CategoryScale, LinearScale, LogarithmicScale, RadialLinearScale, TimeScale, TimeSeriesScale, PluginOptionsByType, ElementOptionsByType, ChartDatasetProperties, UpdateModeEnum, registerables } from './types/index.js';
+export { BarController, BubbleController, DoughnutController, LineController, PieController, PolarAreaController, RadarController, ScatterController, Animation, Animations, TChart as Chart, DatasetController, Interaction, Scale, Ticks, defaults, layouts, registry, ArcElement, BarElement, LineElement, PointElement, BasePlatform, BasicPlatform, DomPlatform, Decimation, Filler, Legend, SubTitle, Title, Tooltip, CategoryScale, LinearScale, LogarithmicScale, RadialLinearScale, TimeScale, TimeSeriesScale, PluginOptionsByType, ElementOptionsByType, ChartDatasetProperties, UpdateModeEnum, registerables } from './types/index.js';
 export * from './types/index.js';
diff --git a/node_modules/chart.js/dist/types/animation.d.ts b/node_modules/chart.js/dist/types/animation.d.ts
index 4189512..956ad93 100644
--- a/node_modules/chart.js/dist/types/animation.d.ts
+++ b/node_modules/chart.js/dist/types/animation.d.ts
@@ -1,4 +1,4 @@
-import {Chart} from './index.js';
+import {TChart} from './index.js';
 import {AnyObject} from './basic.js';
 
 export declare class Animation {
@@ -11,24 +11,24 @@ export declare class Animation {
 }
 
 export interface AnimationEvent {
-  chart: Chart;
+  chart: TChart;
   numSteps: number;
   initial: boolean;
   currentStep: number;
 }
 
 export declare class Animator {
-  listen(chart: Chart, event: 'complete' | 'progress', cb: (event: AnimationEvent) => void): void;
-  add(chart: Chart, items: readonly Animation[]): void;
-  has(chart: Chart): boolean;
-  start(chart: Chart): void;
-  running(chart: Chart): boolean;
-  stop(chart: Chart): void;
-  remove(chart: Chart): boolean;
+  listen(chart: TChart, event: 'complete' | 'progress', cb: (event: AnimationEvent) => void): void;
+  add(chart: TChart, items: readonly Animation[]): void;
+  has(chart: TChart): boolean;
+  start(chart: TChart): void;
+  running(chart: TChart): boolean;
+  stop(chart: TChart): void;
+  remove(chart: TChart): boolean;
 }
 
 export declare class Animations {
-  constructor(chart: Chart, animations: AnyObject);
+  constructor(chart: TChart, animations: AnyObject);
   configure(animations: AnyObject): void;
   update(target: AnyObject, values: AnyObject): undefined | boolean;
 }
diff --git a/node_modules/chart.js/dist/types/index.d.ts b/node_modules/chart.js/dist/types/index.d.ts
index 98bdf09..a162304 100644
--- a/node_modules/chart.js/dist/types/index.d.ts
+++ b/node_modules/chart.js/dist/types/index.d.ts
@@ -22,7 +22,7 @@ export {LayoutItem, LayoutPosition} from './layout.js';
 
 export interface ScriptableContext<TType extends ChartType> {
   active: boolean;
-  chart: Chart;
+  chart: TChart;
   dataIndex: number;
   dataset: UnionToIntersection<ChartDataset<TType>>;
   datasetIndex: number;
@@ -156,7 +156,7 @@ export interface BarControllerChartOptions {
 export type BarController = DatasetController
 export declare const BarController: ChartComponent & {
   prototype: BarController;
-  new (chart: Chart, datasetIndex: number): BarController;
+  new (chart: TChart, datasetIndex: number): BarController;
 };
 
 export interface BubbleControllerDatasetOptions
@@ -183,7 +183,7 @@ export interface BubbleDataPoint extends Point {
 export type BubbleController = DatasetController
 export declare const BubbleController: ChartComponent & {
   prototype: BubbleController;
-  new (chart: Chart, datasetIndex: number): BubbleController;
+  new (chart: TChart, datasetIndex: number): BubbleController;
 };
 
 export interface LineControllerDatasetOptions
@@ -229,7 +229,7 @@ export interface LineControllerChartOptions {
 export type LineController = DatasetController
 export declare const LineController: ChartComponent & {
   prototype: LineController;
-  new (chart: Chart, datasetIndex: number): LineController;
+  new (chart: TChart, datasetIndex: number): LineController;
 };
 
 export type ScatterControllerDatasetOptions = LineControllerDatasetOptions;
@@ -241,7 +241,7 @@ export type ScatterControllerChartOptions = LineControllerChartOptions;
 export type ScatterController = LineController
 export declare const ScatterController: ChartComponent & {
   prototype: ScatterController;
-  new (chart: Chart, datasetIndex: number): ScatterController;
+  new (chart: TChart, datasetIndex: number): ScatterController;
 };
 
 export interface DoughnutControllerDatasetOptions
@@ -349,7 +349,7 @@ export interface DoughnutController extends DatasetController {
 
 export declare const DoughnutController: ChartComponent & {
   prototype: DoughnutController;
-  new (chart: Chart, datasetIndex: number): DoughnutController;
+  new (chart: TChart, datasetIndex: number): DoughnutController;
 };
 
 export interface DoughnutMetaExtensions {
@@ -366,7 +366,7 @@ export type PieMetaExtensions = DoughnutMetaExtensions;
 export type PieController = DoughnutController
 export declare const PieController: ChartComponent & {
   prototype: PieController;
-  new (chart: Chart, datasetIndex: number): PieController;
+  new (chart: TChart, datasetIndex: number): PieController;
 };
 
 export interface PolarAreaControllerDatasetOptions extends DoughnutControllerDatasetOptions {
@@ -394,7 +394,7 @@ export interface PolarAreaController extends DoughnutController {
 }
 export declare const PolarAreaController: ChartComponent & {
   prototype: PolarAreaController;
-  new (chart: Chart, datasetIndex: number): PolarAreaController;
+  new (chart: TChart, datasetIndex: number): PolarAreaController;
 };
 
 export interface RadarControllerDatasetOptions
@@ -427,7 +427,7 @@ export type RadarControllerChartOptions = LineControllerChartOptions;
 export type RadarController = DatasetController
 export declare const RadarController: ChartComponent & {
   prototype: RadarController;
-  new (chart: Chart, datasetIndex: number): RadarController;
+  new (chart: TChart, datasetIndex: number): RadarController;
 };
 interface ChartMetaCommon<TElement extends Element = Element, TDatasetElement extends Element = Element> {
   type: string;
@@ -481,7 +481,7 @@ export interface ActiveElement extends ActiveDataPoint {
   element: Element;
 }
 
-export declare class Chart<
+export declare class TChart<
   TType extends ChartType = ChartType,
   TData = DefaultDataPoint<TType>,
   TLabel = unknown
@@ -546,14 +546,14 @@ export declare class Chart<
 
   isPluginEnabled(pluginId: string): boolean;
 
-  getContext(): { chart: Chart, type: string };
+  getContext(): { chart: TChart, type: string };
 
   static readonly defaults: Defaults;
   static readonly overrides: Overrides;
   static readonly version: string;
-  static readonly instances: { [key: string]: Chart };
+  static readonly instances: { [key: string]: TChart };
   static readonly registry: Registry;
-  static getChart(key: string | CanvasRenderingContext2D | HTMLCanvasElement): Chart | undefined;
+  static getChart(key: string | CanvasRenderingContext2D | HTMLCanvasElement): TChart | undefined;
   static register(...items: ChartComponentLike[]): void;
   static unregister(...items: ChartComponentLike[]): void;
 }
@@ -585,9 +585,9 @@ export declare class DatasetController<
   TDatasetElement extends Element = Element,
   TParsedData = ParsedDataType<TType>,
 > {
-  constructor(chart: Chart, datasetIndex: number);
+  constructor(chart: TChart, datasetIndex: number);
 
-  readonly chart: Chart;
+  readonly chart: TChart;
   readonly index: number;
   readonly _cachedMeta: ChartMeta<TType, TElement, TDatasetElement>;
   enableOptionSharing: boolean;
@@ -721,7 +721,7 @@ export interface InteractionItem {
 }
 
 export type InteractionModeFunction = (
-  chart: Chart,
+  chart: TChart,
   e: ChartEvent,
   options: InteractionOptions,
   useFinalPosition?: boolean
@@ -767,7 +767,7 @@ export declare const Interaction: {
    * Helper function to select candidate elements for interaction
    */
   evaluateInteractionItems(
-    chart: Chart,
+    chart: TChart,
     axis: InteractionAxis,
     position: Point,
     handler: (element: Element & VisualElement, datasetIndex: number, index: number) => void,
@@ -779,26 +779,26 @@ export declare const layouts: {
   /**
    * Register a box to a chart.
    * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.
-   * @param {Chart} chart - the chart to use
+   * @param {TChart} chart - the chart to use
    * @param {LayoutItem} item - the item to add to be laid out
    */
-  addBox(chart: Chart, item: LayoutItem): void;
+  addBox(chart: TChart, item: LayoutItem): void;
 
   /**
    * Remove a layoutItem from a chart
-   * @param {Chart} chart - the chart to remove the box from
+   * @param {TChart} chart - the chart to remove the box from
    * @param {LayoutItem} layoutItem - the item to remove from the layout
    */
-  removeBox(chart: Chart, layoutItem: LayoutItem): void;
+  removeBox(chart: TChart, layoutItem: LayoutItem): void;
 
   /**
    * Sets (or updates) options on the given `item`.
-   * @param {Chart} chart - the chart in which the item lives (or will be added to)
+   * @param {TChart} chart - the chart in which the item lives (or will be added to)
    * @param {LayoutItem} item - the item to configure with the given options
    * @param options - the new item options.
    */
   configure(
-    chart: Chart,
+    chart: TChart,
     item: LayoutItem,
     options: { fullSize?: number; position?: LayoutPosition; weight?: number }
   ): void;
@@ -806,11 +806,11 @@ export declare const layouts: {
   /**
    * Fits boxes of the given chart into the given size by having each box measure itself
    * then running a fitting algorithm
-   * @param {Chart} chart - the chart
+   * @param {TChart} chart - the chart
    * @param {number} width - the width to fit into
    * @param {number} height - the height to fit into
    */
-  update(chart: Chart, width: number, height: number): void;
+  update(chart: TChart, width: number, height: number): void;
 };
 
 export interface Plugin<TType extends ChartType = ChartType, O = AnyObject> extends ExtendedPlugin<TType, O> {
@@ -824,102 +824,102 @@ export interface Plugin<TType extends ChartType = ChartType, O = AnyObject> exte
 
   /**
    * @desc Called when plugin is installed for this chart instance. This hook is also invoked for disabled plugins (options === false).
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {object} options - The plugin options.
    * @since 3.0.0
    */
-  install?(chart: Chart<TType>, args: EmptyObject, options: O): void;
+  install?(chart: TChart<TType>, args: EmptyObject, options: O): void;
   /**
    * @desc Called when a plugin is starting. This happens when chart is created or plugin is enabled.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {object} options - The plugin options.
    * @since 3.0.0
    */
-  start?(chart: Chart<TType>, args: EmptyObject, options: O): void;
+  start?(chart: TChart<TType>, args: EmptyObject, options: O): void;
   /**
    * @desc Called when a plugin stopping. This happens when chart is destroyed or plugin is disabled.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {object} options - The plugin options.
    * @since 3.0.0
    */
-  stop?(chart: Chart<TType>, args: EmptyObject, options: O): void;
+  stop?(chart: TChart<TType>, args: EmptyObject, options: O): void;
   /**
    * @desc Called before initializing `chart`.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {object} options - The plugin options.
    */
-  beforeInit?(chart: Chart<TType>, args: EmptyObject, options: O): void;
+  beforeInit?(chart: TChart<TType>, args: EmptyObject, options: O): void;
   /**
    * @desc Called after `chart` has been initialized and before the first update.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {object} options - The plugin options.
    */
-  afterInit?(chart: Chart<TType>, args: EmptyObject, options: O): void;
+  afterInit?(chart: TChart<TType>, args: EmptyObject, options: O): void;
   /**
    * @desc Called before updating `chart`. If any plugin returns `false`, the update
    * is cancelled (and thus subsequent render(s)) until another `update` is triggered.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {UpdateMode} args.mode - The update mode
    * @param {object} options - The plugin options.
    * @returns {boolean} `false` to cancel the chart update.
    */
-  beforeUpdate?(chart: Chart<TType>, args: { mode: UpdateMode, cancelable: true }, options: O): boolean | void;
+  beforeUpdate?(chart: TChart<TType>, args: { mode: UpdateMode, cancelable: true }, options: O): boolean | void;
   /**
    * @desc Called after `chart` has been updated and before rendering. Note that this
    * hook will not be called if the chart update has been previously cancelled.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {UpdateMode} args.mode - The update mode
    * @param {object} options - The plugin options.
    */
-  afterUpdate?(chart: Chart<TType>, args: { mode: UpdateMode }, options: O): void;
+  afterUpdate?(chart: TChart<TType>, args: { mode: UpdateMode }, options: O): void;
   /**
    * @desc Called during the update process, before any chart elements have been created.
    * This can be used for data decimation by changing the data array inside a dataset.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {object} options - The plugin options.
    */
-  beforeElementsUpdate?(chart: Chart<TType>, args: EmptyObject, options: O): void;
+  beforeElementsUpdate?(chart: TChart<TType>, args: EmptyObject, options: O): void;
   /**
    * @desc Called during chart reset
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {object} options - The plugin options.
    * @since version 3.0.0
    */
-  reset?(chart: Chart<TType>, args: EmptyObject, options: O): void;
+  reset?(chart: TChart<TType>, args: EmptyObject, options: O): void;
   /**
    * @desc Called before updating the `chart` datasets. If any plugin returns `false`,
    * the datasets update is cancelled until another `update` is triggered.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {UpdateMode} args.mode - The update mode.
    * @param {object} options - The plugin options.
    * @returns {boolean} false to cancel the datasets update.
    * @since version 2.1.5
    */
-  beforeDatasetsUpdate?(chart: Chart<TType>, args: { mode: UpdateMode }, options: O): boolean | void;
+  beforeDatasetsUpdate?(chart: TChart<TType>, args: { mode: UpdateMode }, options: O): boolean | void;
   /**
    * @desc Called after the `chart` datasets have been updated. Note that this hook
    * will not be called if the datasets update has been previously cancelled.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {UpdateMode} args.mode - The update mode.
    * @param {object} options - The plugin options.
    * @since version 2.1.5
    */
-  afterDatasetsUpdate?(chart: Chart<TType>, args: { mode: UpdateMode, cancelable: true }, options: O): void;
+  afterDatasetsUpdate?(chart: TChart<TType>, args: { mode: UpdateMode, cancelable: true }, options: O): void;
   /**
    * @desc Called before updating the `chart` dataset at the given `args.index`. If any plugin
    * returns `false`, the datasets update is cancelled until another `update` is triggered.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {number} args.index - The dataset index.
    * @param {object} args.meta - The dataset metadata.
@@ -927,156 +927,156 @@ export interface Plugin<TType extends ChartType = ChartType, O = AnyObject> exte
    * @param {object} options - The plugin options.
    * @returns {boolean} `false` to cancel the chart datasets drawing.
    */
-  beforeDatasetUpdate?(chart: Chart<TType>, args: { index: number; meta: ChartMeta, mode: UpdateMode, cancelable: true }, options: O): boolean | void;
+  beforeDatasetUpdate?(chart: TChart<TType>, args: { index: number; meta: ChartMeta, mode: UpdateMode, cancelable: true }, options: O): boolean | void;
   /**
    * @desc Called after the `chart` datasets at the given `args.index` has been updated. Note
    * that this hook will not be called if the datasets update has been previously cancelled.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {number} args.index - The dataset index.
    * @param {object} args.meta - The dataset metadata.
    * @param {UpdateMode} args.mode - The update mode.
    * @param {object} options - The plugin options.
    */
-  afterDatasetUpdate?(chart: Chart<TType>, args: { index: number; meta: ChartMeta, mode: UpdateMode, cancelable: false }, options: O): void;
+  afterDatasetUpdate?(chart: TChart<TType>, args: { index: number; meta: ChartMeta, mode: UpdateMode, cancelable: false }, options: O): void;
   /**
    * @desc Called before laying out `chart`. If any plugin returns `false`,
    * the layout update is cancelled until another `update` is triggered.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {object} options - The plugin options.
    * @returns {boolean} `false` to cancel the chart layout.
    */
-  beforeLayout?(chart: Chart<TType>, args: { cancelable: true }, options: O): boolean | void;
+  beforeLayout?(chart: TChart<TType>, args: { cancelable: true }, options: O): boolean | void;
   /**
    * @desc Called before scale data limits are calculated. This hook is called separately for each scale in the chart.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {Scale} args.scale - The scale.
    * @param {object} options - The plugin options.
    */
-  beforeDataLimits?(chart: Chart<TType>, args: { scale: Scale }, options: O): void;
+  beforeDataLimits?(chart: TChart<TType>, args: { scale: Scale }, options: O): void;
   /**
    * @desc Called after scale data limits are calculated. This hook is called separately for each scale in the chart.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {Scale} args.scale - The scale.
    * @param {object} options - The plugin options.
    */
-  afterDataLimits?(chart: Chart<TType>, args: { scale: Scale }, options: O): void;
+  afterDataLimits?(chart: TChart<TType>, args: { scale: Scale }, options: O): void;
   /**
    * @desc Called before scale builds its ticks. This hook is called separately for each scale in the chart.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {Scale} args.scale - The scale.
    * @param {object} options - The plugin options.
    */
-  beforeBuildTicks?(chart: Chart<TType>, args: { scale: Scale }, options: O): void;
+  beforeBuildTicks?(chart: TChart<TType>, args: { scale: Scale }, options: O): void;
   /**
    * @desc Called after scale has build its ticks. This hook is called separately for each scale in the chart.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {Scale} args.scale - The scale.
    * @param {object} options - The plugin options.
    */
-  afterBuildTicks?(chart: Chart<TType>, args: { scale: Scale }, options: O): void;
+  afterBuildTicks?(chart: TChart<TType>, args: { scale: Scale }, options: O): void;
   /**
    * @desc Called after the `chart` has been laid out. Note that this hook will not
    * be called if the layout update has been previously cancelled.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {object} options - The plugin options.
    */
-  afterLayout?(chart: Chart<TType>, args: EmptyObject, options: O): void;
+  afterLayout?(chart: TChart<TType>, args: EmptyObject, options: O): void;
   /**
    * @desc Called before rendering `chart`. If any plugin returns `false`,
    * the rendering is cancelled until another `render` is triggered.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {object} options - The plugin options.
    * @returns {boolean} `false` to cancel the chart rendering.
    */
-  beforeRender?(chart: Chart<TType>, args: { cancelable: true }, options: O): boolean | void;
+  beforeRender?(chart: TChart<TType>, args: { cancelable: true }, options: O): boolean | void;
   /**
    * @desc Called after the `chart` has been fully rendered (and animation completed). Note
    * that this hook will not be called if the rendering has been previously cancelled.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {object} options - The plugin options.
    */
-  afterRender?(chart: Chart<TType>, args: EmptyObject, options: O): void;
+  afterRender?(chart: TChart<TType>, args: EmptyObject, options: O): void;
   /**
    * @desc Called before drawing `chart` at every animation frame. If any plugin returns `false`,
    * the frame drawing is cancelled untilanother `render` is triggered.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {object} options - The plugin options.
    * @returns {boolean} `false` to cancel the chart drawing.
    */
-  beforeDraw?(chart: Chart<TType>, args: { cancelable: true }, options: O): boolean | void;
+  beforeDraw?(chart: TChart<TType>, args: { cancelable: true }, options: O): boolean | void;
   /**
    * @desc Called after the `chart` has been drawn. Note that this hook will not be called
    * if the drawing has been previously cancelled.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {object} options - The plugin options.
    */
-  afterDraw?(chart: Chart<TType>, args: EmptyObject, options: O): void;
+  afterDraw?(chart: TChart<TType>, args: EmptyObject, options: O): void;
   /**
    * @desc Called before drawing the `chart` datasets. If any plugin returns `false`,
    * the datasets drawing is cancelled until another `render` is triggered.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {object} options - The plugin options.
    * @returns {boolean} `false` to cancel the chart datasets drawing.
    */
-  beforeDatasetsDraw?(chart: Chart<TType>, args: { cancelable: true }, options: O): boolean | void;
+  beforeDatasetsDraw?(chart: TChart<TType>, args: { cancelable: true }, options: O): boolean | void;
   /**
    * @desc Called after the `chart` datasets have been drawn. Note that this hook
    * will not be called if the datasets drawing has been previously cancelled.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {object} options - The plugin options.
    */
-  afterDatasetsDraw?(chart: Chart<TType>, args: EmptyObject, options: O, cancelable: false): void;
+  afterDatasetsDraw?(chart: TChart<TType>, args: EmptyObject, options: O, cancelable: false): void;
   /**
    * @desc Called before drawing the `chart` dataset at the given `args.index` (datasets
    * are drawn in the reverse order). If any plugin returns `false`, the datasets drawing
    * is cancelled until another `render` is triggered.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {number} args.index - The dataset index.
    * @param {object} args.meta - The dataset metadata.
    * @param {object} options - The plugin options.
    * @returns {boolean} `false` to cancel the chart datasets drawing.
    */
-  beforeDatasetDraw?(chart: Chart<TType>, args: { index: number; meta: ChartMeta }, options: O): boolean | void;
+  beforeDatasetDraw?(chart: TChart<TType>, args: { index: number; meta: ChartMeta }, options: O): boolean | void;
   /**
    * @desc Called after the `chart` datasets at the given `args.index` have been drawn
    * (datasets are drawn in the reverse order). Note that this hook will not be called
    * if the datasets drawing has been previously cancelled.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {number} args.index - The dataset index.
    * @param {object} args.meta - The dataset metadata.
    * @param {object} options - The plugin options.
    */
-  afterDatasetDraw?(chart: Chart<TType>, args: { index: number; meta: ChartMeta }, options: O): void;
+  afterDatasetDraw?(chart: TChart<TType>, args: { index: number; meta: ChartMeta }, options: O): void;
   /**
    * @desc Called before processing the specified `event`. If any plugin returns `false`,
    * the event will be discarded.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {ChartEvent} args.event - The event object.
    * @param {boolean} args.replay - True if this event is replayed from `Chart.update`
    * @param {boolean} args.inChartArea - The event position is inside chartArea
    * @param {object} options - The plugin options.
    */
-  beforeEvent?(chart: Chart<TType>, args: { event: ChartEvent, replay: boolean, cancelable: true, inChartArea: boolean }, options: O): boolean | void;
+  beforeEvent?(chart: TChart<TType>, args: { event: ChartEvent, replay: boolean, cancelable: true, inChartArea: boolean }, options: O): boolean | void;
   /**
    * @desc Called after the `event` has been consumed. Note that this hook
    * will not be called if the `event` has been previously discarded.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {ChartEvent} args.event - The event object.
    * @param {boolean} args.replay - True if this event is replayed from `Chart.update`
@@ -1084,37 +1084,37 @@ export interface Plugin<TType extends ChartType = ChartType, O = AnyObject> exte
    * @param {boolean} [args.changed] - Set to true if the plugin needs a render. Should only be changed to true, because this args object is passed through all plugins.
    * @param {object} options - The plugin options.
    */
-  afterEvent?(chart: Chart<TType>, args: { event: ChartEvent, replay: boolean, changed?: boolean, cancelable: false, inChartArea: boolean }, options: O): void;
+  afterEvent?(chart: TChart<TType>, args: { event: ChartEvent, replay: boolean, changed?: boolean, cancelable: false, inChartArea: boolean }, options: O): void;
   /**
    * @desc Called after the chart as been resized.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {number} args.size - The new canvas display size (eq. canvas.style width & height).
    * @param {object} options - The plugin options.
    */
-  resize?(chart: Chart<TType>, args: { size: { width: number, height: number } }, options: O): void;
+  resize?(chart: TChart<TType>, args: { size: { width: number, height: number } }, options: O): void;
   /**
    * Called before the chart is being destroyed.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {object} options - The plugin options.
    */
-  beforeDestroy?(chart: Chart<TType>, args: EmptyObject, options: O): void;
+  beforeDestroy?(chart: TChart<TType>, args: EmptyObject, options: O): void;
   /**
    * Called after the chart has been destroyed.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {object} options - The plugin options.
    */
-  afterDestroy?(chart: Chart<TType>, args: EmptyObject, options: O): void;
+  afterDestroy?(chart: TChart<TType>, args: EmptyObject, options: O): void;
   /**
    * Called after chart is destroyed on all plugins that were installed for that chart. This hook is also invoked for disabled plugins (options === false).
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {object} options - The plugin options.
    * @since 3.0.0
    */
-  uninstall?(chart: Chart<TType>, args: EmptyObject, options: O): void;
+  uninstall?(chart: TChart<TType>, args: EmptyObject, options: O): void;
 
   /**
    * Default options used in the plugin
@@ -1263,7 +1263,7 @@ export interface Scale<O extends CoreScaleOptions = CoreScaleOptions> extends El
   readonly id: string;
   readonly type: string;
   readonly ctx: CanvasRenderingContext2D;
-  readonly chart: Chart;
+  readonly chart: TChart;
 
   maxWidth: number;
   maxHeight: number;
@@ -1372,18 +1372,18 @@ export interface Scale<O extends CoreScaleOptions = CoreScaleOptions> extends El
   isFullSize(): boolean;
 }
 export declare class Scale {
-  constructor(cfg: {id: string, type: string, ctx: CanvasRenderingContext2D, chart: Chart});
+  constructor(cfg: {id: string, type: string, ctx: CanvasRenderingContext2D, chart: TChart});
 }
 
 export interface ScriptableScaleContext {
-  chart: Chart;
+  chart: TChart;
   scale: Scale;
   index: number;
   tick: Tick;
 }
 
 export interface ScriptableScalePointLabelContext {
-  chart: Chart;
+  chart: TChart;
   scale: Scale;
   index: number;
   label: string;
@@ -1653,7 +1653,7 @@ export interface CoreChartOptions<TType extends ChartType> extends ParsingOption
   /**
    * Called when a resize occurs. Gets passed two arguments: the chart instance and the new size.
    */
-  onResize(chart: Chart, size: { width: number; height: number }): void;
+  onResize(chart: TChart, size: { width: number; height: number }): void;
 
   /**
    * Override the window's default devicePixelRatio.
@@ -1674,12 +1674,12 @@ export interface CoreChartOptions<TType extends ChartType> extends ParsingOption
   /**
    * Called when any of the events fire. Passed the event, an array of active elements (bars, points, etc), and the chart.
    */
-  onHover(event: ChartEvent, elements: ActiveElement[], chart: Chart): void;
+  onHover(event: ChartEvent, elements: ActiveElement[], chart: TChart): void;
 
   /**
    * Called if the event is of type 'mouseup' or 'click'. Passed the event, an array of active elements, and the chart.
    */
-  onClick(event: ChartEvent, elements: ActiveElement[], chart: Chart): void;
+  onClick(event: ChartEvent, elements: ActiveElement[], chart: TChart): void;
 
   layout: Partial<{
     autoPadding: boolean;
@@ -1748,11 +1748,11 @@ export type AnimationOptions<TType extends ChartType> = {
     /**
      * Callback called on each step of an animation.
      */
-    onProgress?: (this: Chart, event: AnimationEvent) => void;
+    onProgress?: (this: TChart, event: AnimationEvent) => void;
     /**
      * Callback called when all animations are completed.
      */
-    onComplete?: (this: Chart, event: AnimationEvent) => void;
+    onComplete?: (this: TChart, event: AnimationEvent) => void;
   };
   animations: AnimationsSpec<TType>;
   transitions: TransitionsSpec<TType>;
@@ -2157,19 +2157,19 @@ export declare class BasePlatform {
   releaseContext(context: CanvasRenderingContext2D): boolean;
   /**
    * Registers the specified listener on the given chart.
-   * @param {Chart} chart - Chart from which to listen for event
+   * @param {TChart} chart - Chart from which to listen for event
    * @param {string} type - The ({@link ChartEvent}) type to listen for
    * @param listener - Receives a notification (an object that implements
    * the {@link ChartEvent} interface) when an event of the specified type occurs.
    */
-  addEventListener(chart: Chart, type: string, listener: (e: ChartEvent) => void): void;
+  addEventListener(chart: TChart, type: string, listener: (e: ChartEvent) => void): void;
   /**
    * Removes the specified listener previously registered with addEventListener.
-   * @param {Chart} chart - Chart from which to remove the listener
+   * @param {TChart} chart - Chart from which to remove the listener
    * @param {string} type - The ({@link ChartEvent}) type to remove
    * @param listener - The listener function to remove from the event target.
    */
-  removeEventListener(chart: Chart, type: string, listener: (e: ChartEvent) => void): void;
+  removeEventListener(chart: TChart, type: string, listener: (e: ChartEvent) => void): void;
   /**
    * @returns {number} the current devicePixelRatio of the device this platform is connected to.
    */
@@ -2340,7 +2340,7 @@ export interface LegendItem {
 }
 
 export interface LegendElement<TType extends ChartType> extends Element<AnyObject, LegendOptions<TType>>, LayoutItem {
-  chart: Chart<TType>;
+  chart: TChart<TType>;
   ctx: CanvasRenderingContext2D;
   legendItems?: LegendItem[];
   options: LegendOptions<TType>;
@@ -2431,7 +2431,7 @@ export interface LegendOptions<TType extends ChartType> {
     /**
      * Generates legend items for each thing in the legend. Default implementation returns the text + styling for the color box. See Legend Item for details.
      */
-    generateLabels(chart: Chart): LegendItem[];
+    generateLabels(chart: TChart): LegendItem[];
 
     /**
      * Filters legend items out of the legend. Receives 2 parameters, a Legend Item and the chart data
@@ -2578,7 +2578,7 @@ export interface TooltipLabelStyle {
   borderRadius?: number | BorderRadius;
 }
 export interface TooltipModel<TType extends ChartType> extends Element<AnyObject, TooltipOptions<TType>> {
-  readonly chart: Chart<TType>;
+  readonly chart: TChart<TType>;
 
   // The items that we are rendering in the tooltip. See Tooltip Item Interface section
   dataPoints: TooltipItem<TType>[];
@@ -2687,26 +2687,26 @@ export interface ExtendedPlugin<
   /**
    * @desc Called before drawing the `tooltip`. If any plugin returns `false`,
    * the tooltip drawing is cancelled until another `render` is triggered.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {Tooltip} args.tooltip - The tooltip.
    * @param {object} options - The plugin options.
    * @returns {boolean} `false` to cancel the chart tooltip drawing.
    */
-  beforeTooltipDraw?(chart: Chart, args: { tooltip: Model, cancelable: true }, options: O): boolean | void;
+  beforeTooltipDraw?(chart: TChart, args: { tooltip: Model, cancelable: true }, options: O): boolean | void;
   /**
    * @desc Called after drawing the `tooltip`. Note that this hook will not
    * be called if the tooltip drawing has been previously cancelled.
-   * @param {Chart} chart - The chart instance.
+   * @param {TChart} chart - The chart instance.
    * @param {object} args - The call arguments.
    * @param {Tooltip} args.tooltip - The tooltip.
    * @param {object} options - The plugin options.
    */
-  afterTooltipDraw?(chart: Chart, args: { tooltip: Model }, options: O): void;
+  afterTooltipDraw?(chart: TChart, args: { tooltip: Model }, options: O): void;
 }
 
 export interface ScriptableTooltipContext<TType extends ChartType> {
-  chart: UnionToIntersection<Chart<TType>>;
+  chart: UnionToIntersection<TChart<TType>>;
   tooltip: UnionToIntersection<TooltipModel<TType>>;
   tooltipItems: TooltipItem<TType>[];
 }
@@ -2720,7 +2720,7 @@ export interface TooltipOptions<TType extends ChartType = ChartType> extends Cor
   /**
    *   See external tooltip section.
    */
-  external(this: TooltipModel<TType>, args: { chart: Chart; tooltip: TooltipModel<TType> }): void;
+  external(this: TooltipModel<TType>, args: { chart: TChart; tooltip: TooltipModel<TType> }): void;
   /**
    * The mode for positioning the tooltip
    */
@@ -2894,7 +2894,7 @@ export interface TooltipItem<TType extends ChartType> {
   /**
    * The chart the tooltip is being shown on
    */
-  chart: Chart;
+  chart: TChart;
 
   /**
    * Label for the tooltip
@@ -3161,7 +3161,7 @@ export interface ScriptableCartesianScaleContext {
 }
 
 export interface ScriptableChartContext {
-  chart: Chart;
+  chart: TChart;
   type: string;
 }
 
@@ -3581,6 +3581,8 @@ export type RadialLinearScaleOptions = CoreScaleOptions & {
 };
 
 export interface RadialLinearScale<O extends RadialLinearScaleOptions = RadialLinearScaleOptions> extends Scale<O> {
+  xCenter: number;
+  yCenter: number;
   setCenterPoint(leftMovement: number, rightMovement: number, topMovement: number, bottomMovement: number): void;
   getIndexAngle(index: number): number;
   getDistanceFromCenterForValue(value: number): number;
@@ -3744,14 +3746,14 @@ export type ScaleChartOptions<TType extends ChartType = ChartType> = {
   };
 };
 
-export type ChartOptions<TType extends ChartType = ChartType> = DeepPartial<
+export type ChartOptions<TType extends ChartType = ChartType> = Exclude<DeepPartial<
 CoreChartOptions<TType> &
 ElementChartOptions<TType> &
 PluginChartOptions<TType> &
 DatasetChartOptions<TType> &
 ScaleChartOptions<TType> &
-ChartTypeRegistry[TType]['chartOptions']
->;
+(ChartTypeRegistry[TType]['chartOptions'] extends unknown ? {} : ChartTypeRegistry[TType]['chartOptions'])
+>, DeepPartial<unknown[]>>;
 
 export type DefaultDataPoint<TType extends ChartType> = DistributiveArray<ChartTypeRegistry[TType]['defaultDataPoint']>;
 
