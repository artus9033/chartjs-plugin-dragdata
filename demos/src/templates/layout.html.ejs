<!doctype html>
<html>
	<head>
		<meta charset="utf-8" />
		<title><%= title %> | Chart.js Drag Data Points Plugin</title>
		<meta
			name="viewport"
			content="width=device-width, initial-scale=1.0, user-scalable=no"
		/>
		<script src="assets/chart.min.js"></script>
		<script src="assets/lodash.min.js"></script>
		<style>
			html,
			body {
				margin: 0;
				padding: 0;
			}

			canvas {
				background-color: #eee;
				position: absolute;
			}
		</style>
	</head>

	<body>
		<canvas id="chartJSContainer" style="height: 90%; width: 90%"></canvas>

		<script>
			window.isTestReady = false;

			window.setupTest = function setupTest(options) {
				const {
					isTest,
					disablePlugin,
					draggableAxis,
					magnetImplSerialized,
					roundingPrecision,
					configurationOverrides,
				} = options;

				if (isTest) {
					console.log(
						"[setupTest] Current URL (for test debugging purposes):",
						window.location.href,
					);

					console.log(
						"[setupTest] Stringified options passed in (for test debugging purposes):",
						JSON.stringify(options),
					);
				}

				function onPluginScriptLoaded() {
					console.log("Plugin script loaded");

					const bothAxesDraggable = draggableAxis === "both",
						xAxisDraggable =
							!draggableAxis || bothAxesDraggable || draggableAxis === "x",
						yAxisDraggable = bothAxesDraggable || draggableAxis === "y";

					console.log("Received page configuration:");
					const receivedConfigForLogging = {
						isTest,
						disablePlugin,
						draggableAxis,
						xAxisDraggable,
						yAxisDraggable,
						magnet: !!magnetImplSerialized,
					};
					console.table(receivedConfigForLogging);

					const configuration = _.merge(
						{
							type: "line",
							options: {
								animation: !isTest,
								plugins: {
									dragData: disablePlugin
										? false
										: {
												dragX: xAxisDraggable,
												dragY: yAxisDraggable,
												round: roundingPrecision,
												showTooltip: true,
												onDrag: function (e) {
													if (e.target?.style)
														e.target.style.cursor = "grabbing";
												},
												onDragEnd: function (e) {
													if (e.target?.style)
														e.target.style.cursor = "default";
												},
												magnet: magnetImplSerialized
													? {
															// the reasoning for brackets below is: https://stackoverflow.com/questions/49262112/is-there-a-way-to-evaluate-a-function-defined-as-a-string-by-using-eval
															to: eval(`(${magnetImplSerialized})`),
														}
													: undefined,
											},
								},
								onHover: function (e) {
									const point = e.chart.getElementsAtEventForMode(
										e,
										"nearest",
										{ intersect: true },
										false,
									);
									if (point.length) e.native.target.style.cursor = "grab";
									else e.native.target.style.cursor = "default";
								},
							},
						},
						configurationOverrides,
					);

					console.log("Constructed chart configuration:", configuration);

					var ctx = document
						.getElementById("chartJSContainer")
						.getContext("2d");
					window.testedChart = new Chart(ctx, configuration);

					window.isTestReady = true;
				}

				// load the plugin script dynamically - either with IstanbulJS's coverage statements or not, depending on the value of isTest
				let scriptElement = document.createElement("script");
				scriptElement.src = isTest
					? "assets/chartjs-plugin-dragdata-test-browser.js"
					: "assets/chartjs-plugin-dragdata.min.js";

				console.log("Loading plugin script from:", scriptElement.src);

				scriptElement.onload = onPluginScriptLoaded;
				document.head.appendChild(scriptElement);
			};
		</script>
	</body>
</html>
